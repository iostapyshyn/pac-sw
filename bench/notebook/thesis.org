#+STARTUP: content
#+PROPERTY: header-args:python :session *PAC-SW Bench2 Notebook*

#+begin_src python :results none
  import numpy as np
  import pandas as pd
  import matplotlib
  import matplotlib.pyplot as plt
  from os import path

  from versuchung.search import *

  import sys
  sys.path.append("../")
  import bench

  from tabulate import tabulate
  def pd2org(df):
      return tabulate(df, headers=df.columns, tablefmt='orgtbl')

  archs = {'pi4': 'AArch64', 'lab-pc61': 'x86-64'}
  hosts = ['lab-pc61', 'pi4']
  backends = ['nop', 'xxhash', 'qarma']
  scopes = ['nil', 'char', 'array', 'strong', 'all']

  plt.style.use('bmh')

  plt.rcParams["font.family"] = "Rotis Sans Serif Std"
  plt.rcParams["axes.labelcolor"] = "black"
  plt.rcParams['axes.axisbelow'] = True
  plt.rcParams["xtick.color"] = "black"
  plt.rcParams["ytick.color"] = "black"
  plt.rcParams["xtick.labelcolor"] = "black"
  plt.rcParams["ytick.labelcolor"] = "black"
  plt.rcParams["axes.labelcolor"] = "black"
  plt.rcParams['axes.facecolor'] = '#F5F5F5'
  plt.rcParams['axes.edgecolor'] = 'black'
  plt.rcParams['axes.linewidth'] = 0.8
  plt.rcParams['xtick.direction'] = 'out'
  plt.rcParams['ytick.direction'] = 'out'
  plt.rcParams['legend.facecolor'] = 'white'
  plt.rcParams['legend.framealpha'] = '0.8'
#+end_src

#+begin_src python :results output
  def load_df(query):
      exp = search_experiment(bench.Bench, "../data", query)
      df = pd.read_csv(exp.o.build.path, index_col='name')
      raw = dict(np.load(exp.o.pac.path))
      pac = pd.DataFrame({
          "mean": { k: v.mean() for k, v in raw.items() },
          "std": { k: v.std() for k, v in raw.items() },
          "min": { k: v.min() for k, v in raw.items() },
          "max": { k: v.max() for k, v in raw.items() },
      })
      return pd.concat([df,pac],axis=1)

  exps = {}
  for host in hosts:
      h = {}
      for backend in backends:
          b = {}
          for scope in scopes:
              b[scope] = load_df({'host': host, 'backend': backend, 'scope': scope})
          for scope in scopes:
              slowdown = b[scope]['mean'] - b['nil']['mean']
              b[scope]['oh'] = (slowdown / b['nil']['mean'] * 100).abs()
              b[scope]['aut_s'] = b[scope]['auths']/slowdown
              b[scope] = b[scope].sort_values('oh', ascending=False)
          h[backend] = b
      exps[host] = h

  benchmarks = exps['pi4']['nop']['nil'].index.values
#+end_src

#+RESULTS:

#+begin_src python :results none
  def set_yticks(ax):
      ticks = [j*10**i for i in range(0,5) for j in range(1,10)]
      nticks = [-i for i in ticks]
      ax.set_yticks(nticks+ticks, minor=True)

  fn = f'scatter.pdf'
  fig,axs = plt.subplots(ncols=2, nrows=1)
  fig.set_figheight(4)
  fig.set_figwidth(8)

  for i, host in enumerate(hosts):
      ax=axs[i]
      exps[host]['nop']['all'].plot.scatter(x='auths', y='oh', logx=True, ax=ax, color="#D32F2F", label='No hashing', sharey=False, s=15.0, marker='o')
      exps[host]['xxhash']['all'].plot.scatter(x='auths', y ='oh', logx=True, ax=ax, color="#303F9F", label='xxHash', sharey=False, s=15.0, marker='o')
      exps[host]['qarma']['all'].plot.scatter(x='auths', y ='oh', logx=True, ax=ax, color="#00796B", label='QARMA', sharey=False, s=15.0, marker='o')
      ax.axhline(np.percentile(exps[host]['nop']['all']['oh'], 75), linestyle='--', linewidth=1, color="#D32F2F", alpha=0.6)
      ax.axhline(np.percentile(exps[host]['xxhash']['all']['oh'], 75), linestyle='--', linewidth=1, color="#303F9F", alpha=0.6)
      ax.axhline(np.percentile(exps[host]['qarma']['all']['oh'], 75), linestyle='--', linewidth=1, color="#00796B", alpha=0.6)
      ax.set_yscale('symlog', linthresh=1)
      set_yticks(ax)
      ax.set_ylim([0, 10**4])
      ax.set_title(archs[host])
      ax.set_xlabel("Authentication requests per benchmark")
      ax.set_ylabel("Run-time overhead [%]")

  red_patch1 = matplotlib.lines.Line2D([0], [0], color='black', linestyle='--', linewidth=1)
  handles, labels = axs[0].get_legend_handles_labels()
  handles.append(red_patch1)
  labels.append('75th percentile')
  axs[0].legend(handles, labels)
  axs[1].get_legend().remove()
  axs[1].yaxis.label.set_visible(False)
  axs[1].yaxis.tick_right()
  plt.subplots_adjust(wspace=0.1, hspace=0)
  plt.tight_layout()

  plt.savefig(fn)
#+end_src

#+begin_src python :results none
  colors=["#673AB7",
          "#1976D2",
          "#4CAF50",
          "#EF6C00",
          ]
  colors=["#4CAF50",
          "#1976D2",
          "#5E35B1",
          "#D81B60",
          ]

  fn = 'scopes.pdf'
  fig,axs = plt.subplots(nrows=2, ncols=2)
  fig.set_figheight(6)
  fig.set_figwidth(8)

  for j, host in enumerate(hosts):

      ax=axs[0][j]
      for i, scope in enumerate(reversed(scopes[1:])):
          df = exps[host]['nop'][scope].nlargest(12, 'oh')
          df['prot_rel'] = df['inst']/df['total'] * 100
          df['prot_rel'].plot.bar(ax=ax, legend=True, label=f'{scope}', color=colors[i])
      ax.set_yscale('linear')
      ax.set_ylabel('Protected functions [%]')
      ax.set_ylim([0, 105])


      if j != 0:
          ax.yaxis.tick_right()
          ax.yaxis.label.set_visible(False)
          ax.legend(loc='upper right')
      else:
          ax.get_legend().remove()

      ax.set_title(archs[host])


      ax=axs[1][j]
      for i, scope in enumerate(reversed(scopes[1:])):
          df = exps[host]['nop'][scope]['oh'].nlargest(12)
          df.plot.bar(ax=ax, sharex=True, legend=True, label=f'{scope}', color=colors[i])
      ax.set_yscale('symlog', linthresh=1)
      ax.set_ylabel('Run-time overhead [%]')
      set_yticks(ax)
      ax.set_ylim([0, 10**4])

      ax.get_legend().remove()


      if j != 0:
          ax.yaxis.tick_right()
          ax.yaxis.label.set_visible(False)

      ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right', rotation_mode="anchor")

  plt.subplots_adjust(left=0.075, right=0.95, top=0.95, bottom=0.15, wspace=0.05, hspace=0.10)
  plt.savefig(fn)
#+end_src
