#+STARTUP: content
#+PROPERTY: header-args:python :session *PAC-SW Memtier Performance Notebook*

#+begin_src python :results none
  import numpy as np
  import pandas as pd
  import matplotlib
  import matplotlib.pyplot as plt
  import matplotlib.ticker as tck
  from os import path

  from matplotlib.patches import Patch
  from matplotlib.lines import Line2D

  from tabulate import tabulate
  def pd2org(df):
      return tabulate(df, headers=df.columns, tablefmt='orgtbl')

  plt.style.use('bmh')

  plt.rcParams["font.family"] = "Rotis Sans Serif Std"
  plt.rcParams["axes.labelcolor"] = "black"
  plt.rcParams['axes.axisbelow'] = True
  plt.rcParams["xtick.color"] = "black"
  plt.rcParams["ytick.color"] = "black"
  plt.rcParams["xtick.labelcolor"] = "black"
  plt.rcParams["ytick.labelcolor"] = "black"
  plt.rcParams["axes.labelcolor"] = "black"
  plt.rcParams['axes.facecolor'] = '#F5F5F5'
  plt.rcParams['axes.edgecolor'] = 'black'
  plt.rcParams['axes.linewidth'] = 0.8
  plt.rcParams['xtick.direction'] = 'out'
  plt.rcParams['ytick.direction'] = 'out'
  plt.rcParams['legend.facecolor'] = 'white'
  plt.rcParams['legend.framealpha'] = '0.8'
#+end_src

#+begin_src python :results none
  hosts = ['memorix', 'armorix']
  scopes= ['nil', 'strong', 'all']
  archs = {'memorix': 'x86-64', 'armorix': 'AArch64'}

  exps = {}
  maxs = {}

  for host in hosts:
      exps[host] = {}
      for scope in scopes:
          fn = f'data/{host}/{scope}-1_GET.npz'

          d = np.load(fn)['arr_0'] * 1e-3
          maxs[host] = max(maxs.get(host,0),np.max(d))
          exps[host][scope] = d


#+end_src


#+begin_src python :results none
  fn = 'hist.pdf'
  fig,axs = plt.subplots(ncols=2, nrows=3, sharex='col')
  fig.set_figheight(8)
  fig.set_figwidth(8)

  colors=["#303F9F", "#00796B", "#D32F2F"]

  for i, host in enumerate(hosts):
      handles = []
      handles.append(Line2D([0], [0], color='k', linestyle='-.', linewidth=1, label='99th percentile'))
      #handles.append(Line2D([0], [0], color='k', linestyle='--', linewidth=1, label='Mean'))

      for j, scope in enumerate(scopes):
          handles.append(Patch(facecolor=colors[j], label=f'{scope}-{0 if scope=="nil" else 1}'))

      for j, scope in enumerate(scopes):
          d = exps[host][scope]
          ax = axs[j][i]

          bins = np.arange(0, maxs[host], maxs[host]/80)

          ax.hist(d, bins=bins, color=colors[j])
          #ax.axvline(np.mean(d), color='k', linestyle='--', linewidth=1)
          ax.axvline(np.percentile(d, 99), color='k', linestyle='-.', linewidth=1)
          ax.set_yscale('log')

          ax.set_ylim([1, 10**8])

          if i == 0:
              ax.set_ylabel('Samples')
          else:
              ax.yaxis.tick_right()
              if j == 0:
                  ax.legend(handles=handles)


          if j == 0:
              ax.set_title(archs[host])

          if j == 2:
              ax.set_xlabel('Request latency, ms')

          ax.minorticks_on()
          ax.tick_params(axis='y', which='minor', left=False)
          ax.tick_params(axis='y', which='minor', right=False)


  plt.subplots_adjust(left=0.075, right=0.95, top=0.95, bottom=0.075, wspace=0.05, hspace=0.1)
  plt.savefig(fn)
#+end_src

#+begin_src python :results none

  cores = {'nil': [1],
           'strong': [1],
           'all': [12, 6, 2, 1]}

  exps2 = {}

  for host in hosts:
      exps2[host] = {}
      for scope in scopes:
          for core in cores[scope]:
              fn = f'data/{host}/{scope}-{core}_GET.npz'

              d = np.load(fn)['arr_0'] * 1e-3
              if scope == 'nil':
                  core = 0

              exps2[host][f'{scope}-{core}'] = {}
              exps2[host][f'{scope}-{core}']['mean'] = d.mean()
              exps2[host][f'{scope}-{core}']['p50'] = np.percentile(d, 50)
              exps2[host][f'{scope}-{core}']['p99'] = np.percentile(d, 99)
              exps2[host][f'{scope}-{core}']['p99.5'] = np.percentile(d, 99.5)
              exps2[host][f'{scope}-{core}']['p99.9'] = np.percentile(d, 99.9)
#+end_src

#+begin_src python :results none

  for host in hosts:
      fn = f'stats_{host}.tex'

      with open(fn, 'w') as f:
          f.write('\\begin{tabular}{lrrrrr}\n')
          f.write('\\toprule\n')
          f.write(' & \\multicolumn{5}{r}{Latency (ms)}\\\\\n')
          f.write(' & Average & P50 & P99 & P99.5 & P99.9 \\\\\n\midrule\n')
          for k, d in exps2[host].items():
              f.write('\\texttt{{{}}} & {:.3f} & {:.3f} & {:.3f} & {:.3f} & {:.3f}\\\\\n'
                      .format(k, d['mean'], d['p50'], d['p99'], d['p99.5'], d['p99.9']))

          f.write('\\bottomrule\n')
          f.write('\\end{tabular}')

#+end_src

#+begin_src python :results none
  
#+end_src
